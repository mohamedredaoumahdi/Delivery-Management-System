generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User roles enum
enum UserRole {
  CUSTOMER
  VENDOR
  DELIVERY
  ADMIN
}

// Shop categories enum
enum ShopCategory {
  RESTAURANT
  GROCERY
  PHARMACY
  RETAIL
  OTHER
}

// Order status enum
enum OrderStatus {
  PENDING
  ACCEPTED
  PREPARING
  READY_FOR_PICKUP
  IN_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
}

// Payment method enum
enum PaymentMethod {
  CASH_ON_DELIVERY
  CARD
  WALLET
  BANK_TRANSFER
}

// Users table - handles all user types
model User {
  id                String   @id @default(uuid())
  email             String   @unique
  name              String
  phone             String?
  profilePicture    String?  @map("profile_picture")
  role              UserRole @default(CUSTOMER)
  isEmailVerified   Boolean  @default(false) @map("is_email_verified")
  isPhoneVerified   Boolean  @default(false) @map("is_phone_verified")
  isActive          Boolean  @default(true) @map("is_active")
  passwordHash      String   @map("password_hash")
  lastLoginAt       DateTime? @map("last_login_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relationships
  shops             Shop[]   @relation("ShopOwner")
  orders            Order[]  @relation("CustomerOrders")
  deliveryOrders    Order[]  @relation("DeliveryPersonOrders")
  addresses         Address[]
  reviews           Review[]
  refreshTokens     RefreshToken[]
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]

  @@map("users")
}

// Refresh tokens for JWT authentication
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// Shops/Vendors table
model Shop {
  id                    String       @id @default(uuid())
  name                  String
  description           String
  category              ShopCategory
  logoUrl               String?      @map("logo_url")
  coverImageUrl         String?      @map("cover_image_url")
  address               String
  latitude              Float
  longitude             Float
  phone                 String
  email                 String
  website               String?
  openingHours          Json         @map("opening_hours") // JSON object with days and hours
  rating                Float        @default(0)
  ratingCount           Int          @default(0) @map("rating_count")
  isOpen                Boolean      @default(true) @map("is_open")
  hasDelivery           Boolean      @default(true) @map("has_delivery")
  hasPickup             Boolean      @default(true) @map("has_pickup")
  minimumOrderAmount    Float        @default(0) @map("minimum_order_amount")
  deliveryFee           Float        @default(0) @map("delivery_fee")
  estimatedDeliveryTime Int          @map("estimated_delivery_time") // in minutes
  isActive              Boolean      @default(true) @map("is_active")
  isFeatured            Boolean      @default(false) @map("is_featured")
  ownerId               String       @map("owner_id")
  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @updatedAt @map("updated_at")

  // Relationships
  owner                 User         @relation("ShopOwner", fields: [ownerId], references: [id])
  products              Product[]
  orders                Order[]
  reviews               Review[]

  @@map("shops")
}

// Products table
model Product {
  id               String    @id @default(uuid())
  name             String
  description      String
  price            Float
  discountedPrice  Float?    @map("discounted_price")
  imageUrl         String?   @map("image_url")
  images           String[]  // Array of image URLs
  category         String
  tags             String[]  // Array of tags for searching
  nutritionalInfo  Json?     @map("nutritional_info") // JSON object
  inStock          Boolean   @default(true) @map("in_stock")
  stockQuantity    Int?      @map("stock_quantity")
  isFeatured       Boolean   @default(false) @map("is_featured")
  isActive         Boolean   @default(true) @map("is_active")
  rating           Float     @default(0)
  ratingCount      Int       @default(0) @map("rating_count")
  shopId           String    @map("shop_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relationships
  shop             Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)
  orderItems       OrderItem[]
  reviews          Review[]

  @@map("products")
}

// User addresses
model Address {
  id              String   @id @default(uuid())
  label           String   // e.g., "Home", "Work"
  fullAddress     String   @map("full_address")
  latitude        Float
  longitude       Float
  instructions    String?
  isDefault       Boolean  @default(false) @map("is_default")
  userId          String   @map("user_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relationships
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders          Order[]

  @@map("addresses")
}

// Orders table
model Order {
  id                      String        @id @default(uuid())
  orderNumber             String        @unique @map("order_number") // Human-readable order number
  userId                  String        @map("user_id")
  shopId                  String        @map("shop_id")
  shopName                String        @map("shop_name") // Stored for history
  addressId               String?       @map("address_id")
  deliveryAddress         String        @map("delivery_address")
  deliveryLatitude        Float         @map("delivery_latitude")
  deliveryLongitude       Float         @map("delivery_longitude")
  deliveryInstructions    String?       @map("delivery_instructions")
  subtotal                Float
  deliveryFee             Float         @map("delivery_fee")
  serviceFee              Float         @map("service_fee")
  tax                     Float
  tip                     Float         @default(0)
  discount                Float         @default(0)
  total                   Float
  paymentMethod           PaymentMethod @map("payment_method")
  paymentId               String?       @map("payment_id")
  status                  OrderStatus   @default(PENDING)
  estimatedDeliveryTime   DateTime?     @map("estimated_delivery_time")
  deliveredAt             DateTime?     @map("delivered_at")
  deliveryPersonId        String?       @map("delivery_person_id")
  rejectionReason         String?       @map("rejection_reason")
  cancellationReason      String?       @map("cancellation_reason")
  createdAt               DateTime      @default(now()) @map("created_at")
  updatedAt               DateTime      @updatedAt @map("updated_at")

  // Relationships
  user                    User          @relation("CustomerOrders", fields: [userId], references: [id])
  shop                    Shop          @relation(fields: [shopId], references: [id])
  address                 Address?      @relation(fields: [addressId], references: [id])
  deliveryPerson          User?         @relation("DeliveryPersonOrders", fields: [deliveryPersonId], references: [id])
  items                   OrderItem[]
  statusHistory           OrderStatusHistory[]
  trackingUpdates         OrderTracking[]

  @@map("orders")
}

// Order items table
model OrderItem {
  id               String  @id @default(uuid())
  orderId          String  @map("order_id")
  productId        String  @map("product_id")
  productName      String  @map("product_name") // Stored for history
  productPrice     Float   @map("product_price") // Price at time of order
  quantity         Int
  totalPrice       Float   @map("total_price")
  instructions     String?
  createdAt        DateTime @default(now()) @map("created_at")

  // Relationships
  order            Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product          Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Order status history for tracking
model OrderStatusHistory {
  id          String      @id @default(uuid())
  orderId     String      @map("order_id")
  status      OrderStatus
  notes       String?
  timestamp   DateTime    @default(now())

  // Relationships
  order       Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_history")
}

// Real-time order tracking
model OrderTracking {
  id          String   @id @default(uuid())
  orderId     String   @map("order_id")
  latitude    Float
  longitude   Float
  timestamp   DateTime @default(now())

  // Relationships
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_tracking")
}

// Reviews and ratings
model Review {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  shopId      String?   @map("shop_id")
  productId   String?   @map("product_id")
  rating      Float
  comment     String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relationships
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop        Shop?     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  product     Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// System configurations
model Config {
  id    String @id @default(uuid())
  key   String @unique
  value Json

  @@map("configs")
}

// Password Reset Tokens
model PasswordResetToken {
  id        String   @id @default(uuid())
  tokenHash String   @unique @map("token_hash")
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

// Email Verification Tokens
model EmailVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}