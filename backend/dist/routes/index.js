"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_1 = __importDefault(require("./auth"));
const shops_1 = __importDefault(require("./shops"));
const orders_1 = __importDefault(require("./orders"));
const vendor_1 = __importDefault(require("./vendor"));
const delivery_1 = __importDefault(require("./delivery"));
const router = (0, express_1.Router)();
router.use('/auth', auth_1.default);
router.use('/shops', shops_1.default);
router.use('/orders', orders_1.default);
router.use('/vendor', vendor_1.default);
router.use('/delivery', delivery_1.default);
exports.default = router;
const shopController_1 = require("@/controllers/shopController");
const auth_2 = require("@/middleware/auth");
const cache_1 = require("@/middleware/cache");
const router = (0, express_1.Router)();
const shopController = new shopController_1.ShopController();
router.get('/', (0, cache_1.cache)(300), shopController.getShops);
router.get('/featured', (0, cache_1.cache)(600), shopController.getFeaturedShops);
router.get('/nearby', shopController.getNearbyShops);
router.get('/:id', (0, cache_1.cache)(300), shopController.getShopById);
router.get('/:id/products', (0, cache_1.cache)(180), shopController.getShopProducts);
router.get('/:id/categories', (0, cache_1.cache)(600), shopController.getShopCategories);
exports.default = router;
const orderController_1 = require("@/controllers/orderController");
const validation_1 = require("@/middleware/validation");
const orderValidators_1 = require("@/validators/orderValidators");
const router = (0, express_1.Router)();
const orderController = new orderController_1.OrderController();
router.use(auth_2.auth);
router.post('/', (0, validation_1.validateRequest)(orderValidators_1.createOrderSchema), orderController.createOrder);
router.get('/', orderController.getUserOrders);
router.get('/:id', orderController.getOrderById);
router.patch('/:id/cancel', orderController.cancelOrder);
router.patch('/:id/tip', (0, validation_1.validateRequest)(orderValidators_1.updateOrderSchema), orderController.updateTip);
router.get('/:id/track', orderController.trackOrder);
exports.default = router;
const vendorController_1 = require("@/controllers/vendorController");
const requireRole_1 = require("@/middleware/requireRole");
const vendorValidators_1 = require("@/validators/vendorValidators");
const upload_1 = require("@/middleware/upload");
const router = (0, express_1.Router)();
const vendorController = new vendorController_1.VendorController();
router.use(auth_2.auth);
router.use((0, requireRole_1.requireRole)(['VENDOR']));
router.get('/shop', vendorController.getVendorShop);
router.put('/shop', (0, validation_1.validateRequest)(vendorValidators_1.updateShopSchema), vendorController.updateShop);
router.patch('/shop/status', vendorController.toggleShopStatus);
router.get('/products', vendorController.getVendorProducts);
router.post('/products', upload_1.upload.array('images', 5), (0, validation_1.validateRequest)(vendorValidators_1.createProductSchema), vendorController.createProduct);
router.put('/products/:id', upload_1.upload.array('images', 5), vendorController.updateProduct);
router.delete('/products/:id', vendorController.deleteProduct);
router.get('/orders', vendorController.getVendorOrders);
router.patch('/orders/:id/status', vendorController.updateOrderStatus);
router.get('/orders/stats', vendorController.getOrderStats);
router.get('/analytics/sales', vendorController.getSalesAnalytics);
router.get('/analytics/products', vendorController.getProductAnalytics);
exports.default = router;
const deliveryController_1 = require("@/controllers/deliveryController");
const deliveryValidators_1 = require("@/validators/deliveryValidators");
const router = (0, express_1.Router)();
const deliveryController = new deliveryController_1.DeliveryController();
router.use(auth_2.auth);
router.use((0, requireRole_1.requireRole)(['DELIVERY']));
router.get('/orders', deliveryController.getAssignedOrders);
router.get('/orders/available', deliveryController.getAvailableOrders);
router.patch('/orders/:id/accept', deliveryController.acceptOrder);
router.patch('/orders/:id/pickup', deliveryController.markPickedUp);
router.patch('/orders/:id/delivered', deliveryController.markDelivered);
router.patch('/orders/:id/location', (0, validation_1.validateRequest)(deliveryValidators_1.updateLocationSchema), deliveryController.updateLocation);
router.get('/stats', deliveryController.getDeliveryStats);
router.get('/earnings', deliveryController.getEarnings);
exports.default = router;
//# sourceMappingURL=index.js.map